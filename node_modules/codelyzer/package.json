{
  "_args": [
    [
      {
        "raw": "codelyzer@~0.0.26",
        "scope": null,
        "escapedName": "codelyzer",
        "name": "codelyzer",
        "rawSpec": "~0.0.26",
        "spec": ">=0.0.26 <0.1.0",
        "type": "range"
      },
      "/Users/natemamman/reader"
    ]
  ],
  "_from": "codelyzer@>=0.0.26 <0.1.0",
  "_id": "codelyzer@0.0.28",
  "_inCache": true,
  "_location": "/codelyzer",
  "_nodeVersion": "5.4.0",
  "_npmOperationalInternal": {
    "host": "packages-16-east.internal.npmjs.com",
    "tmp": "tmp/codelyzer-0.0.28.tgz_1470950755997_0.026074186665937304"
  },
  "_npmUser": {
    "name": "mgechev",
    "email": "mgechev@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "codelyzer@~0.0.26",
    "scope": null,
    "escapedName": "codelyzer",
    "name": "codelyzer",
    "rawSpec": "~0.0.26",
    "spec": ">=0.0.26 <0.1.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/codelyzer/-/codelyzer-0.0.28.tgz",
  "_shasum": "294d31224f99f5268ab5e40b7e71060ddb942fa3",
  "_shrinkwrap": null,
  "_spec": "codelyzer@~0.0.26",
  "_where": "/Users/natemamman/reader",
  "author": {
    "name": "Minko Gechev",
    "email": "mgechev@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/mgechev/codelyzer/issues"
  },
  "dependencies": {
    "sprintf-js": "^1.0.3"
  },
  "description": "A set of linters for Angular 2 applications, following https:/angular.io/styleguide.",
  "devDependencies": {
    "chai": "^3.5.0",
    "chai-spies": "^0.7.1",
    "minimalist": "1.0.0",
    "mocha": "3.0.2",
    "rimraf": "^2.5.2",
    "ts-node": "1.2.2",
    "tslint": "3.14.0",
    "typings": "1.3.2"
  },
  "directories": {},
  "dist": {
    "shasum": "294d31224f99f5268ab5e40b7e71060ddb942fa3",
    "tarball": "https://registry.npmjs.org/codelyzer/-/codelyzer-0.0.28.tgz"
  },
  "homepage": "https://github.com/mgechev/codelyzer#readme",
  "keywords": [
    "Angular",
    "2",
    "style",
    "guide",
    "ng2lint",
    "lint",
    "tslint"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "mgechev",
      "email": "mgechev@gmail.com"
    }
  ],
  "name": "codelyzer",
  "optionalDependencies": {},
  "peerDependencies": {
    "tslint": "^3.9.0"
  },
  "readme": "# Codelyzer\n\n[![](http://s32.postimg.org/vo1xrbgw5/codelyzer.png)](https://youtu.be/bci-Z6nURgE)\n\nA set of tslint rules for static code analysis of Angular 2 TypeScript projects.\n\nYou can run the static code analyzer over web apps, NativeScript, Ionic, etc.\n\n## Install\n\n`npm install --save-dev codelyzer`\n\nThen hop to your `tslint.json` and add rulesDirectory which points to codelyzer, like this:\n```json\n{\n  \"rulesDirectory\": [\n    \"node_modules/codelyzer\"\n  ],\n  \"rules\":{\n  }\n}\n```\n\nNow you can apply codelyzer rules to your tslint config. Enjoy!\n\n## Recommended configuration\n\nBelow you can find a recommended configuration which is based on the [Angular 2 Style Guide](https://angular.io/styleguide).\n\n```json\n{\n  \"directive-selector-name\": [true, \"camelCase\"],\n  \"component-selector-name\": [true, \"kebab-case\"],\n  \"directive-selector-type\": [true, \"attribute\"],\n  \"component-selector-type\": [true, \"element\"],\n  \"directive-selector-prefix\": [true, \"sg\"],\n  \"component-selector-prefix\": [true, \"sg\"],\n  \"use-input-property-decorator\": true,\n  \"use-output-property-decorator\": true,\n  \"use-host-property-decorator\": true,\n  \"no-attribute-parameter-decorator\": true,\n  \"no-input-rename\": true,\n  \"no-output-rename\": true,\n  \"no-forward-ref\" :true,\n  \"use-life-cycle-interface\": true,\n  \"use-pipe-transform-interface\": true,\n  \"pipe-naming\": [true, \"camelCase\", \"sg\"],\n  \"component-class-suffix\": true,\n  \"directive-class-suffix\": true,\n  \"import-destructuring-spacing\": true\n}\n```\n\n## Roadmap\n\n- [x] Directive selector type.\n- [x] Directive selector name convention.\n- [x] Directive selector name prefix.\n- [x] Component selector type.\n- [x] Component selector name convention.\n- [x] Component selector name prefix.\n- [x] Use `@Input` instead of `inputs` decorator property.\n- [x] Use `@Output` instead of `outputs` decorator property.\n- [x] Use `@HostListeners` and `@HostBindings` instead of `host` decorator property.\n- [x] Implement life-cycle hooks explicitly.\n- [x] Implement Pipe transform interface for pipes.\n- [x] Proper naming for pipes (kebab-case, optionally prefixed).\n- [x] Do not rename outputs.\n- [x] Do not rename inputs.\n- [x] Do not use `forwardRef`.\n- [x] Do not use the `@Attribute` decorator.\n- [x] Proper naming of directives and components (name plus `(Directive|Component)` suffix).\n- [ ] Do not use `nativeElement` injected with `ElementRef`.\n- [ ] Externalize template above *n* lines of code.\n- [ ] Rise a warning for impure pipes.\n- [ ] Do not declare global providers.\n- [ ] Follow convention for naming the routes.\n- [ ] Use `@Injectable` instead of `@Inject`.\n- [ ] Single export per module, except facade modules.\n- [ ] Proper naming of modules (kebab-case followed by module type followed by extension for regular modules, module name plus extension name for facades).\n- [ ] Verify if used directive is declared in the current component or any parent component.\n- [ ] Verify that property or method used in the template exists in the current context.\n- [ ] Locate component templates in the same directory.\n- [ ] Locate tests in the same directory (rise optional warning when no test file is found).\n- [ ] Rise warning on complex logic inside of the templates.\n- [ ] Do not manipulate elements referenced within the template.\n\n## License\n\nMIT\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/mgechev/codelyzer.git"
  },
  "scripts": {
    "release": "rimraf dist && tsc && npm t && cp package.json README.md dist/src && ts-node build/links.ts --src ./dist/src",
    "test": "rimraf dist && tsc && mocha --compilers ts:ts-node/register",
    "test:watch": "npm run test -- -w",
    "tsc": "tsc",
    "tscw": "tsc -w",
    "typings": "typings"
  },
  "version": "0.0.28"
}
